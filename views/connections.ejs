    <%- include header.ejs -%>
            <div class="row" display="background:transparent">
                <div class="col-lg-12" id="network">
                    <h3>Your Network <span class="badge"><%= network.length %></span></h3>
                    <% network.forEach(function(n1){ %>
                      <img class="img-circle head-shot" src="<%= n1.avatar_url %>"></img>
                      <% }) %>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <h3>Below shows your networks relative contributions and popularity</h3>
                </div>
            </div>

        <%- include footer.ejs -%>
        
<script src="http://d3js.org/d3.v3.min.js"></script>

<script>

var diameter = 1000,
    format = d3.format(",d"),
    color = d3.scale.category20c();

var bubble = d3.layout.pack()
    .sort(null)
    .size([diameter, diameter])
    .padding(1.5);

var svg = d3.select("body").append("svg")
    .attr("width", diameter)
    .attr("height", diameter)
    .attr("class", "bubble");

var defs = svg.append('svg:defs');


d3.json("/d3", function(error, root) {
    if(error){
        console.log("You done messed up");
        console.log(error);
    } else {
        console.log(root);
    }
  var node = svg.selectAll(".node")
      .data(bubble.nodes(classes(root))
      .filter(function(d) { return !d.children; }))
    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
      .attr("width", function(d) { return d.r + "px";})
      .attr("height", function(d) { return d.r + "px";});

    var allpatterns = defs.selectAll("pattern")
        .data(bubble.nodes(classes(root))
          .filter(function(d) { return !d.children; }))
        .enter().append('svg:pattern')
        .attr('id', function(d){ return d.id;})
        .attr('width', function(d) { return d.r;})
        .attr('height', function(d) { return d.r;})
        .append('svg:image')
        .attr('xlink:href', function(d){ console.log(d.avatar_url); return d.avatar_url;})
        .attr('x', 0)//function(d) { return d.r / 1.5; })
        .attr('y', 0)//function(d) { return d.r / 1.5; })
        .attr('width',  function(d) { return d.r * 2;})
        .attr('height',  function(d) { return d.r * 2;})
        ;

  node.append("svg:a")
      .attr("xlink:href", function(d) { return d.url})
      .attr("target", "_blank")

  .append("circle")
      .attr("r", function(d) { return d.r; })
      .style("fill", function(d){ return "url(#" + d.id + ")"});

  /*node.append("text")
      .attr("dy", ".3em")
      .style("text-anchor", "middle")
      .text(function(d) { return d.login; });*/
});

// Returns a flattened hierarchy containing all leaf nodes under the root.
function classes(root) {
  var classes = [];

  for ( var i = 0, len = root.length; i < len; i++) {
    var obj = root[i];
    classes.push({login: obj.login, avatar_url: obj["avatar_url"], value: obj.followers, url: "https://github.com/" + obj.login, id: obj.id});
  }

  /*function recurse(name, node) {
    if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });
    else classes.push({packageName: name, className: node.name, value: node.size});
  }

  recurse(null, root); */
  return {children: classes};
}

d3.select(self.frameElement).style("height", diameter + "px");

</script>